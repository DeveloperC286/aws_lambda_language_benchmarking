go-local-formatting:
  stage: formatting
  image: golang
  script:
    - cd go/local/
    - for i in $(du -a "./src/" | awk '{print $2}' | grep -i "[.]go$"); do
    - test -z "$(gofmt -l "$i")" || ( echo "$i needs formatted." && exit 1 )
    - done
  rules:
    - if: $CI_MERGE_REQUEST_ID


go-local-linting:
  stage: linting
  image: golang
  before_script:
    - go get -u golang.org/x/lint/golint
  script:
    - cd go/local/
    - go mod download
    - for i in $(du -a "./src/" | awk '{print $2}' | grep -i "[.]go$"); do
    - /go/bin/golint -set_exit_status "$i" || ( echo "$i needs linting." && exit 1 )
    - done
  rules:
    - if: $CI_MERGE_REQUEST_ID


go-local-vetting:
  stage: vetting
  image: golang
  script:
    - cd go/local/
    - go mod download
    - for i in $(du -a "./src/" | awk '{print $2}' | grep -i "[.]go$"); do
    - test -z "$(go vet "$i" 2>&1)" || ( echo "$i needs vetting." && exit 1 )
    - done
  rules:
    - if: $CI_MERGE_REQUEST_ID


go-local-compiling:
  stage: compiling
  image: golang
  script:
    - cd go/local/
    - go mod download
    - go build -o main "./src/"
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "master"
