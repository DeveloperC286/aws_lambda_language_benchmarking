go-local-formatting:
  stage: formatting
  image: golang
  script:
    - cd go/local/
    - for i in $(du -a "./src/" | awk '{print $2}' | grep -i "[.]go$"); do
    - test -z "$(gofmt -l "$i")" || ( echo "$i needs formatted." && exit 1 )
    - done
  rules:
    - if: $CI_MERGE_REQUEST_ID


go-local-linting:
  stage: linting
  image: golangci/golangci-lint
  script:
    - cd go/local/
    - go mod download
    - golangci-lint run
  rules:
    - if: $CI_MERGE_REQUEST_ID


go-local-module-tidying:
  stage: module-tidying
  image: golang
  script:
    - cd go/local/
    - cp "go.mod" "go.mod.copy"
    - go mod tidy
    - cmp "go.mod" "go.mod.copy" || ( echo "Modules need tidied." && exit 1 )
  rules:
    - if: $CI_MERGE_REQUEST_ID


go-local-compiling:
  stage: compiling
  image: golang
  script:
    - cd go/local/
    - go mod download
    - go build -o main "./src/"
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
